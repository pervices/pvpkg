#!/bin/bash

# This script configures network interfaces and firewall rules for
# fiber optic connections on Ubuntu 24.04 LTS.
# All changes, including network, firewall, and ring buffer settings, are persistent across reboots.

# --- Script Safety Flags ---
set -Eeuo pipefail

# #Set flags
# # -e : Exit immediately on command failure
# # -o pipefail : propagate exit codes on pipes to right most.
# # -u : treat unset variables as an error
# # -x : print each command prior to executing it.
# # -E : ensure that errors are caught and cleaned up.

# trap "echo Trap was triggered" cleanup SIGINT SIGTERM ERR EXIT

# --- Help Functions ---
function help_synopsis {
    echo -e "SYNOPSIS"
    echo -e "\t $0 [ help | <iface_name> <cyan_qSFP_nbr> ]"
    echo -e "Where:"
    echo -e "\t iface_name"
    echo -e "\t\t Interface name to configure."
    echo -e "\t cyan_qSFP_nbr [0|1|2|3]"
    echo -e "\t\t Cyan qSFP port number connected to <iface_name>,"
    echo -e "\t\t with Cyan qSFP+ port A corresponding to 0, and D to 3."
    echo -e ""
    echo -e "For detailed help and example invocations, run:"
    echo -e "\t $0 help"
    exit 1
}

function help_detailed {
    echo -e "USAGE"
    echo -e "\t $0 help"
    echo -e "\t\t Display this detailed help message."
    echo -e ""
    echo -e "\t $0 <InterfaceName> <ChannelNumber>"
    echo -e "\t\t Configure interface for use with Cyan qSFP+ channel number"
    echo -e "Where:\n"
    echo -e "<InterfaceName>"
    echo -e "\t Device name of the network interface you wish to configure."
    echo -e "\t To list all available interfaces, run:"
    echo -e "\t\t ip link show"
    echo -e ""
    echo -e "<ChannelNumber> [0|1|2|3]"
    echo -e "\t The number corresponding to the Cyan SFP+ port connected to"
    echo -e "\t the specified <InterfaceName>, where:"
    echo -e "\t\t Cyan qSFP+ A = 0"
    echo -e "\t\t Cyan qSFP+ B = 1"
    echo -e "\t\t Cyan qSFP+ C = 2"
    echo -e "\t\t Cyan qSFP+ D = 3"
    echo -e ""
    echo -e "EXAMPLES:"
    echo -e "\t After physically connecting the interface \"enp1s0f1\" to the"
    echo -e "\t Cyan qSFP+ port A, run:"
    echo -e "\t\t  $0 enp1s0f1 0"
    echo -e "\t After physically connecting the interface \"enp0s31f6\" to the"
    echo -e "\t Cyan qSFP+ port D, run:"
    echo -e "\t\t  $0 enp0s31f6 3"
    exit 1
}

# --- Argument Validation ---

if [ "$#" -eq 1 ] && [ "$1" == 'help' ]; then
    help_detailed
fi

if [ "$#" -ne 2 ]; then
    echo "ERROR: Invalid Number of Arguments"
    help_synopsis
fi

# --- Runtime Environment Checks ---

if [ "$EUID" -ne 0 ]; then
    echo "ERROR: Please run this program as the root user."
    exit 1
fi

# --- Argument Parsing ---
IFACE_NAME=$1
SDR_PORT=$2

# --- Core Program Logic ---
if [ "$#" -eq 2 ]; then
    # --- Persistent Network Interface Configuration (Netplan) ---
    IP_ADDR="10.10.1${SDR_PORT}.10/24"
    SDR_IP_ADDR="10.10.1${SDR_PORT}.2"
    GATEWAY="10.10.1${SDR_PORT}.1"
    NETPLAN_FILE="/etc/netplan/99-sdr-config-${IFACE_NAME}.yaml"

    echo -e "\n  Generating persistent netplan configuration for '$IFACE_NAME'..."
    cat <<EOF > "$NETPLAN_FILE"
# This file was auto-generated by a script for $IFACE_NAME.
network:
  version: 2
  ethernets:
    $IFACE_NAME:
      addresses:
        - $IP_ADDR
      # This interface does NOT need a default route.
      # It is for a direct data connection.
      mtu: 9000
EOF
    
    echo "Applying new network configuration..."
    netplan apply
    
    # Set secure permissions for the netplan config file.
    chmod 600 "$NETPLAN_FILE"

    # --- Persistent Ring Buffer Configuration (systemd) ---
    SERVICE_NAME="persistent-ethtool-${IFACE_NAME}.service"
    SERVICE_FILE="/etc/systemd/system/${SERVICE_NAME}"
    # Use 'which' to find the absolute path of ethtool for the service file.
    ETHTOOL_PATH=$(which ethtool)

    echo "Querying maximum ring buffer size for ${IFACE_NAME}..."
    # Use ethtool and awk to find the maximum pre-set values for RX and TX.
    MAX_RX=$(ethtool -g "${IFACE_NAME}" | awk '$1 == "RX:" {print $2; exit}')
    MAX_TX=$(ethtool -g "${IFACE_NAME}" | awk '$1 == "TX:" {print $2; exit}')
    echo "Max RX found: ${MAX_RX}, Max TX found: ${MAX_TX}"
    
    echo -e "\n Creating systemd service for persistent ring buffer settings..."
    cat <<EOF > "$SERVICE_FILE"
[Unit]
Description=Set persistent ethtool settings for ${IFACE_NAME}
Wants=network-online.target
After=network-online.target

[Service]
Type=oneshot
ExecStart=${ETHTOOL_PATH} -G ${IFACE_NAME} rx ${MAX_RX} tx ${MAX_TX}

[Install]
WantedBy=multi-user.target
EOF

    echo "Enabling and starting the new systemd service: ${SERVICE_NAME}"
    # Reload the systemd daemon to recognize the new service file.
    systemctl daemon-reload
    # Enable the service to start on boot and start it now.
    systemctl enable --now "${SERVICE_NAME}"


    # --- Persistent Firewall Configuration (ufw) ---
    # This is set so that all users who have the firewall turned on have the proper configs.
    echo -e "\n Configuring persistent firewall rules with ufw..."
    ports='42836 42837 42838 42839 42840 42841 42842 42843 42809 42810 42811 42812 42799'
    for port in $ports
    do
        echo "Allowing UDP port $port..."
        ufw allow $port/udp
    done

    echo "Allowing all traffic on '$IFACE_NAME' from trusted source '$SDR_IP_ADDR'..."
    ufw allow in on "$IFACE_NAME" from "$SDR_IP_ADDR"

    echo "Reloading firewall rules..."
    ufw reload

    echo -e "\n Configuration for '$IFACE_NAME' is complete and fully persistent.\n"
    exit 0
fi
